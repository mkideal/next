// Code generated by "stringer -type=TokenType -linecomment"; DO NOT EDIT.

package protocol

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenTypeText-0]
	_ = x[TokenTypeNamespace-1]
	_ = x[TokenTypeType-2]
	_ = x[TokenTypeClass-3]
	_ = x[TokenTypeEnum-4]
	_ = x[TokenTypeInterface-5]
	_ = x[TokenTypeStruct-6]
	_ = x[TokenTypeTypeParameter-7]
	_ = x[TokenTypeParameter-8]
	_ = x[TokenTypeVariable-9]
	_ = x[TokenTypeProperty-10]
	_ = x[TokenTypeEnumMember-11]
	_ = x[TokenTypeEvent-12]
	_ = x[TokenTypeFunction-13]
	_ = x[TokenTypeMethod-14]
	_ = x[TokenTypeMacro-15]
	_ = x[TokenTypeKeyword-16]
	_ = x[TokenTypeModifier-17]
	_ = x[TokenTypeComment-18]
	_ = x[TokenTypeString-19]
	_ = x[TokenTypeNumber-20]
	_ = x[TokenTypeRegexp-21]
	_ = x[TokenTypeOperator-22]
	_ = x[tokenTypeCount-23]
}

const _TokenType_name = "textnamespacetypeclassenuminterfacestructtypeParameterparametervariablepropertyenumMembereventfunctionmethodmacrokeywordmodifiercommentstringnumberregexpoperator-count-"

var _TokenType_index = [...]uint8{0, 4, 13, 17, 22, 26, 35, 41, 54, 63, 71, 79, 89, 94, 102, 108, 113, 120, 128, 135, 141, 147, 153, 161, 168}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
