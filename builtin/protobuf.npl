{{/* next/protobuf/file: Generates the main structure for a Protocol Buffers file */}}
{{- define "next/protobuf/file" -}}
syntax = "proto3";

package {{this.Package.Name}};
{{render "next/protobuf/package:options" this.Package | linespace -}}
{{next .Imports | linespace -}}
{{next .Decls | linespace -}}
{{- end}}

{{/* next/protobuf/package:options: Handles package-level options based on annotations */}}
{{- define "next/protobuf/package:options"}}
{{- if .Annotations.next }}
	{{- range $key, $value := .Annotations.next }}
		{{- if not (hasSuffix "_package" $key)}}
			{{- continue -}}
		{{- end -}}
		{{- $lang := $key | trimSuffix "_package"}}
		{{- if eq $lang "go" -}}
			{{println}}option go_package = "{{$value}}";
		{{- else if eq $lang "java" -}}
			{{println}}option java_package = "{{$value}}";
		{{- else if eq $lang "csharp" -}}
			{{println}}option csharp_namespace = "{{$value}}";
		{{- end }}
	{{- end }}
{{- end }}
{{- end }}

{{/* next/protobuf/imports: Generates import statements for Protocol Buffers */}}
{{- define "next/protobuf/imports" -}}
{{- if this.UsedKinds.Has "any"}}
import "google/protobuf/any.proto";
{{end}}
{{- super .}}
{{- end}}

{{/* next/protobuf/import: Generates an import statement for a specific .proto file */}}
{{- define "next/protobuf/import"}}
import "{{.Target.Name}}.proto";
{{- end}}

{{/* next/protobuf/consts: Skips constant declarations as they're not directly supported in Protocol Buffers */}}
{{- define "next/protobuf/consts"}}
{{- if .}}
// {{len .List}} Constant{{if gt (len .List) 1}}s{{end}} skipped.
{{- end}}
{{- end}}

{{/* next/protobuf/enum: Generates an enum declaration */}}
{{- define "next/protobuf/enum"}}
{{- if not .MemberType.Kind.IsInteger -}}
	{{- error "%s: enum type must be an integer" .Pos}}
{{- end}}
{{next .Doc -}}
enum {{next .Type}} {
	{{- $hasZero := false -}}
	{{- range .Members.List}}
		{{- if eq .Value.Actual 0 -}}
			{{- $hasZero = true -}}
			{{- break -}}
		{{- end -}}
	{{- end}}
	{{- if not $hasZero}}
	{{render "enum:member.name.prefix" .}}UNSPECIFIED = 0;
	{{- end}}
	{{- next .Members | indent | linespace -}}
}
{{end}}

{{/* next/protobuf/enum.member: Generates an enum member */}}
{{- define "next/protobuf/enum.member"}}
{{next .Doc -}}
{{- render "enum.member:name" .}} = {{next .Value}};
{{- end}}

{{/* next/protobuf/enum.member:name: Generates the name for an enum member */}}
{{- define "next/protobuf/enum.member:name" -}}
{{- render "enum:member.name.prefix" .Decl}}{{- render "node:snake.case.name" . | upper}}
{{- end}}

{{/* next/protobuf/enum:member.name.prefix: Generates the prefix for an enum member name */}}
{{- define "next/protobuf/enum:member.name.prefix" -}}
{{- render "node:name.tokens" . | split " " | map first | join "" | upper}}_
{{- end}}

{{/* next/protobuf/struct: Generates a message declaration */}}
{{- define "next/protobuf/struct"}}
{{next .Doc -}}
message {{next .Type}} {
	{{- next .Fields | indent | linespace -}}
}
{{end}}

{{/* next/protobuf/struct.field: Generates a field declaration within a message */}}
{{- define "next/protobuf/struct.field"}}
{{next .Doc -}}
{{render "struct.field:type" .}} {{render "struct.field:name" .}} = {{render "struct.field:tag" .}}{{render "struct.field:deprecated" .}};{{next .Comment}}
{{- end}}

{{/* next/protobuf/struct.field:deprecated: Adds the deprecated option to a field if necessary */}}
{{- define "next/protobuf/struct.field:deprecated" -}}
{{- if .Annotations.next.deprecated}} [deprecated = true]{{end}}
{{- end -}}

{{/* next/protobuf/struct.field:tag: Assigns a sequential tag number based on field index */}}
{{- define "next/protobuf/struct.field:tag" -}}
{{- add .Index 1}}
{{- end -}}

{{/* next/protobuf/struct.field:type: Handles custom field type if specified */}}
{{- define "next/protobuf/struct.field:type" -}}
{{- $type := next $.Type}}

{{- if .Annotations.next.optional}}
	{{- if .Type.Kind.IsArray}}
		{{- error "%s: @next(optional) annotation is not supported for array field" .Pos}}
	{{- else if .Type.Kind.IsVector}}
		{{- error "%s: @next(optional) annotation is not supported for vector field" .Pos}}
	{{- else if .Type.Kind.IsMap}}
		{{- error "%s: @next(optional) annotation is not supported for map field" .Pos}}
	{{- else}}
		{{- $type = printf "optional %s" $type}}
	{{- end}}
{{- end}}

{{- $type}}
{{- end -}}

{{/* next/protobuf/interface: Generates a service declaration */}}
{{- define "next/protobuf/interface"}}
{{next .Doc -}}
service {{next .Type}} {
	{{- next .Methods | indent | linespace -}}
}
{{- end}}

{{/* next/protobuf/interface.method: Generates an RPC method declaration within a service */}}
{{- define "next/protobuf/interface.method"}}
{{next .Doc -}}
rpc {{render "interface.method:name" .}} ({{render "interface.method:param.type" .}}) returns ({{next .Result}});
{{- end}}

{{/* next/protobuf/interface.method:param.type: Determines the input type for an RPC method */}}
{{- define "next/protobuf/interface.method:param.type" -}}
	{{- with .Params.List}}
		{{- if eq (len .) 1}}
			{{- next (index . 0).Type}}
		{{- else}}
			{{- render "interface.method:name" $}}Request
		{{- end}}
	{{- else -}}
		google.protobuf.Empty
	{{- end}}
{{- end}}

{{/* next/protobuf/interface.method.result: Determines the return type for an RPC method */}}
{{- define "next/protobuf/interface.method.result" -}}
{{- if .Type -}}
	{{- next .Type -}}
{{- else -}}
	google.protobuf.Empty
{{- end}}
{{- end}}

{{/* next/protobuf/used.type: Generates a fully qualified type name, including package name if necessary */}}
{{- define "next/protobuf/used.type" -}}
{{- if not (.File.Package.Has .Type) -}}
	{{.Type.File.Package.Name}}.
{{- end}}
{{- next .Type -}}
{{- end}}