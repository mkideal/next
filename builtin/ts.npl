{{/* next/ts/import: Generates an import statement for a module */}}
{{- define "next/ts/import"}}
import * as {{.Target.Name}} from './{{.Target.Name}}';
{{- end}}

{{/* next/ts/doc: Generates documentation comments for TypeScript (uses C-like doc style) */}}
{{- define "next/ts/doc" -}}
{{render "doc:clike" .}}
{{- end}}

{{/* next/ts/used.type: Generates a fully qualified type name, including module name if necessary */}}
{{- define "next/ts/used.type" -}}
{{- if and (ne .File .Type.Decl.File) (.Type.Decl.File)}}
	{{- .Type.Decl.File.Name}}.
{{- end}}
	{{- next .Type}}
{{- end}}

{{- define "next/ts/type:literal.suffix" -}}
	{{- if eq .Kind.String "int64" -}}
		n
	{{- end}}
{{- end}}

{{/* next/ts/const: Generates a constant declaration with type annotation */}}
{{- define "next/ts/const"}}
{{next .Doc -}}
export const {{render "const:name" .}}: {{next .Type}} = {{next .Value}};{{next .Comment}}
{{- end}}

{{/* next/ts/enum: Generates an enum declaration */}}
{{- define "next/ts/enum"}}
{{next .Doc -}}
export enum {{next .Type}} {
	{{- next .Members | indent | linespace -}}
}
{{end}}

{{/* next/ts/enum.member: Generates an individual enum member */}}
{{- define "next/ts/enum.member"}}
{{next .Doc -}}
{{- render "enum.member:name" .}} = {{next .Value}}{{if not .IsLast}},{{end}}{{next .Comment}}
{{- end}}

{{/* next/ts/struct: Generates a class declaration */}}
{{- define "next/ts/struct"}}
{{next .Doc -}}
export class {{next .Type}} {
	{{- next .Fields | indent | linespace -}}
}
{{end}}

{{/* next/ts/struct.field: Generates a single field declaration with JSDoc */}}
{{- define "next/ts/struct.field"}}
{{next .Doc -}}
{{- render "struct.field:name" .}}{{if .Annotations.Has "optional"}}?{{end}}: {{next .Type}};{{next .Comment}}
{{- end}}

{{/* next/ts/interface: Generates an interface declaration */}}
{{- define "next/ts/interface"}}
{{next .Doc -}}
export interface {{next .Type}} {
	{{- next .Methods | indent | linespace -}}
}
{{end}}

{{/* next/ts/interface.method: Generates a single method declaration with JSDoc */}}
{{- define "next/ts/interface.method"}}
{{if .Doc.Text -}}
/**
{{.Doc.Format " * " -}}
{{_}} *
{{- if .Params.List -}}
{{- range .Params.List}}
{{_}} * @param {{render "interface.method.parameter:name" .}} { {{next .Type}} }
{{- end}}
{{- end}}
{{- if .Result.Type}}
{{_}} * @returns { {{next .Result.Type}} }
{{- end}}
 */
{{end}}
{{- render "interface.method:name" .}}({{next .Params}}): {{if .Result.Type}}{{next .Result.Type}}{{else}}void{{end}};{{next .Comment}}
{{- end}}

{{/* next/ts/interface.method.parameter: Generates a parameter for an interface method */}}
{{- define "next/ts/interface.method.parameter" -}}
{{- render "interface.method.parameter:name" .}}: {{next .Type}}
{{- end}}

{{/* next/ts/type:zero: Generates a zero value for a given type */}}
{{- define "next/ts/type:zero" -}}
{{- if .Kind.IsNumeric -}}
0{{render "type:literal.suffix" .}}
{{- else if .Kind.IsString -}}
""
{{- else if .Kind.IsBool -}}
false
{{- else if .Kind.IsArray -}}
[]
{{- else if .Kind.IsMap -}}
new Map()
{{- else if .Kind.IsVector -}}
[]
{{- else if .Kind.IsBytes -}}
new Uint8Array()
{{- else if .Kind.IsAny -}}
null
{{- else if .Kind.IsStruct -}}
new {{next .}}
{{- else if .Kind.IsEnum -}}
{{render "type:zero" .Actual.Decl.MemberType}} as {{next .}}
{{- else}}
null
{{- end}}
{{- end}}