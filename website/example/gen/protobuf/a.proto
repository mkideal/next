// Code generated by "next"; DO NOT EDIT

syntax = "proto3";

package a;

option go_package = "github.com/mkideal/next/website/example/gen/go/a";
option java_package = "com.example.a";

// 34 Constants skipped.

// Enum with iota
enum Color {
	C_UNSPECIFIED = 0;
	C_RED = 1;
	C_GREEN = 2;
	C_BLUE = 4;
	C_ALPHA = 8;
	C_YELLOW = 3;
	C_CYAN = 6;
	C_MAGENTA = 5;
	C_WHITE = 7;
}

// Enum with complex iota usage
enum FilePermission {
	FP_NONE = 0;
	FP_EXECUTE = 1;
	FP_WRITE = 2;
	FP_READ = 4;
	FP_USER_READ = 4;
	FP_USER_WRITE = 32;
	FP_USER_EXECUTE = 256;
	FP_GROUP_READ = 2048;
	FP_GROUP_WRITE = 16384;
	FP_GROUP_EXECUTE = 131072;
	FP_OTHERS_READ = 1048576;
	FP_OTHERS_WRITE = 8388608;
	FP_OTHERS_EXECUTE = 67108864;
	// 4|32|256|2048|16384|131072|1048576|8388608|67108864
	// 4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864
	FP_ALL = 76695844;
}

enum Day {
	D_UNSPECIFIED = 0;
	D_MONDAY = 1;
	D_TUESDAY = 2;
	D_WEDNESDAY = 4;
	D_THURSDAY = 8;
	D_FRIDAY = 16;
	D_SATURDAY = 32;
	D_SUNDAY = 64;
	D_WEEKDAY = 31;
	D_WEEKEND = 96;
}

enum Month {
	M_UNSPECIFIED = 0;
	M_JANUARY = 1;
	M_FEBRUARY = 2;
	M_MARCH = 4;
	M_APRIL = 8;
	M_MAY = 16;
	M_JUNE = 32;
	M_JULY = 64;
	M_AUGUST = 128;
	M_SEPTEMBER = 256;
	M_OCTOBER = 512;
	M_NOVEMBER = 1024;
	M_DECEMBER = 2048;
	M_Q1 = 7;
	M_Q2 = 56;
	M_Q3 = 448;
	M_Q4 = 3584;
}

// Test cases for iota
enum IotatestEnum {
	IE_A = 0;
	IE_B = 1;
	IE_C = 0;
	IE_D = 2;
	IE_E = 0;
	IE_F = 1;
	IE_G = 0;
}

// Struct types
message Point2D {
	double x = 1; // x-coordinate
	double y = 2; // y-coordinate
}

message Point3D {
	Point2D point = 1;
	double z = 2;
}

message Rectangle {
	Point2D topLeft = 1;
	Point2D bottomRight = 2;
}

// Struct with various field types
message ComplexStruct {
	bool flag = 1;
	int32 tinyInt = 2;
	int32 smallInt = 3;
	int32 mediumInt = 4;
	int64 bigInt = 5;
	int32 defaultInt = 6;
	float singlePrecision = 7;
	double doublePrecision = 8;
	string text = 9;
	int32 singleByte = 10;
	bytes byteArray = 11;
	repeated int32 fixedArray = 12;
	repeated string dynamicArray = 13;
	repeated int32 intArray = 14;
	map<string, int32> dictionary = 15;
}

message User {
	int64 id = 1;
	string username = 2;
	string email = 3;
	Day preferredDay = 4;
	Month birthMonth = 5;
}

message UserProfile {
	User user = 1;
	string firstName = 2;
	string lastName = 3;
	int32 age = 4;
	repeated string interests = 5;
}

// message types
message LoginRequest {
	string username = 1;
	string password = 2;
	string deviceId = 3;
	optional string twoFactorToken = 4;
}

message LoginResponse {
	bool success = 1;
	string errorMessage = 2;
	string authenticationToken = 3;
	User user = 4;
}

message GenericRequest {
	string requestId = 1;
	int64 timestamp = 2;
}

message GenericResponse {
	string requestId = 1;
	int64 timestamp = 2;
	bool success = 3;
	string errorCode = 4;
	string errorMessage = 5;
}
