// Code generated by "next 0.0.5"; DO NOT EDIT.

/**
 * XX constant
 * XX value 2
 */
export const XX = 1; // XX value
/**
 * Constants
 */
export const ServerName = "Comprehensive Test Server";
export const Version = "1.0.0";
export const MaxConnections = 1000;
export const Pi = 3.14159265358979323846;
export const MaxInt64 = 9223372036854775807; // 2^63 - 1
export const MinInt64 = -9223372036854775808; // -2^63
/**
 * Constants with complex expressions
 */
export const A = 1;
export const B = 3;
export const C = 9;
export const D = 7;
export const E = 28;
export const F = 1052;
export const G = 1052;
export const H = 5672;
export const I = 5673.618; // Approximation of golden ratio
export const J = 47.28015; // 120 is 5!
/**
 * Constants with function calls
 */
export const StringLength = 13;
export const MinValue = 1;
export const MaxValue = 5673;
/**
 * Constants using built-in functions
 */
export const IntFromBool = 1;
export const IntFromFloat = 3;
export const FloatFromInt = 42.0;
export const FloatFromBool = 0.0;
export const BoolFromInt = true;
export const BoolFromString = true;
export const FormattedString1 = "The answer is 42";
export const FormattedString2 = "Pi is approximately 3.14";
export const FormattedString3 = "Hello World\n";
/**
 * Constants for testing complex expressions and bitwise operations
 */
export const Complex1 = 5673;
export const Complex2 = 78547;
export const Complex3 = 31;
export const Complex4 = 31;
export const Complex5 = 31;

/**
 * Enum with iota
 */
export const Color = Object.freeze({
	Red: 1,
	Green: 2,
	Blue: 4,
	Alpha: 8,
	Yellow: 3,
	Cyan: 6,
	Magenta: 5,
	White: 7
});

/**
 * Enum with complex iota usage
 */
export const FilePermission = Object.freeze({
	None: 0,
	Execute: 1,
	Write: 2,
	Read: 4,
	UserRead: 4,
	UserWrite: 32,
	UserExecute: 256,
	GroupRead: 2048,
	GroupWrite: 16384,
	GroupExecute: 131072,
	OthersRead: 1048576,
	OthersWrite: 8388608,
	OthersExecute: 67108864,
	/**
	 * 4|32|256|2048|16384|131072|1048576|8388608|67108864
	 * 4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864
	 */
	All: 76695844
});

export const Day = Object.freeze({
	Monday: 1,
	Tuesday: 2,
	Wednesday: 4,
	Thursday: 8,
	Friday: 16,
	Saturday: 32,
	Sunday: 64,
	Weekday: 31,
	Weekend: 96
});

export const Month = Object.freeze({
	January: 1,
	February: 2,
	March: 4,
	April: 8,
	May: 16,
	June: 32,
	July: 64,
	August: 128,
	September: 256,
	October: 512,
	November: 1024,
	December: 2048,
	Q1: 7,
	Q2: 56,
	Q3: 448,
	Q4: 3584
});

/**
 * Test cases for iota
 */
export const IotatestEnum = Object.freeze({
	A: 0, // 0
	B: 1, // 1
	C: 0, // 0
	D: 2, // 2
	E: 0, // 0
	F: 1, // 1
	G: 0 // 0
});

/**
 * Struct types
 */
export class Point2D {
	constructor() {
		/** @type { Number } */
		this.x = 0; // x-coordinate
		/** @type { Number } */
		this.y = 0; // y-coordinate
	}
}

export class Point3D {
	constructor() {
		/** @type { Point2D } */
		this.point = new Point2D;
		/** @type { Number } */
		this.z = 0;
	}
}

export class Rectangle {
	constructor() {
		/** @type { Point2D } */
		this.topLeft = new Point2D;
		/** @type { Point2D } */
		this.bottomRight = new Point2D;
	}
}

/**
 * Struct with various field types
 */
export class ComplexStruct {
	constructor() {
		/** @type { Boolean } */
		this.flag = false;
		/** @type { Number } */
		this.tinyInt = 0;
		/** @type { Number } */
		this.smallInt = 0;
		/** @type { Number } */
		this.mediumInt = 0;
		/** @type { BigInt } */
		this.bigInt = 0;
		/** @type { Number } */
		this.defaultInt = 0;
		/** @type { Number } */
		this.singlePrecision = 0;
		/** @type { Number } */
		this.doublePrecision = 0;
		/** @type { String } */
		this.text = "";
		/** @type { Number } */
		this.singleByte = 0;
		/** @type { 'Uint8Array' } */
		this.byteArray = new Uint8Array();
		/** @type { 'Array<Number>' } */
		this.fixedArray = [];
		/** @type { 'Array<String>' } */
		this.dynamicArray = [];
		/** @type { 'Array<Number>' } */
		this.intArray = [];
		/** @type { 'Map<String, Number>' } */
		this.dictionary = new Map();
	}
}

export class User {
	constructor() {
		/** @type { BigInt } */
		this.id = 0;
		/** @type { String } */
		this.username = "";
		/** @type { String } */
		this.email = "";
		/** @type { 'number' } */
		this.preferredDay = Day[Object.keys(Day)[0]];
		/** @type { 'number' } */
		this.birthMonth = Month[Object.keys(Month)[0]];
	}
}

export class UserProfile {
	constructor() {
		/** @type { User } */
		this.user = new User;
		/** @type { String } */
		this.firstName = "";
		/** @type { String } */
		this.lastName = "";
		/** @type { Number } */
		this.age = 0;
		/** @type { 'Array<String>' } */
		this.interests = [];
	}
}

/**
 * message types
 */
export class LoginRequest {
	constructor() {
		/** @type { String } */
		this.username = "";
		/** @type { String } */
		this.password = "";
		/** @type { String } */
		this.deviceId = "";
		/** @type { String } */
		this.twoFactorToken = "";
	}
}

export class LoginResponse {
	constructor() {
		/** @type { Boolean } */
		this.success = false;
		/** @type { String } */
		this.errorMessage = "";
		/** @type { String } */
		this.authenticationToken = "";
		/** @type { User } */
		this.user = new User;
	}
}

export class GenericRequest {
	constructor() {
		/** @type { String } */
		this.requestId = "";
		/** @type { BigInt } */
		this.timestamp = 0;
	}
}

export class GenericResponse {
	constructor() {
		/** @type { String } */
		this.requestId = "";
		/** @type { BigInt } */
		this.timestamp = 0;
		/** @type { Boolean } */
		this.success = false;
		/** @type { String } */
		this.errorCode = "";
		/** @type { String } */
		this.errorMessage = "";
	}
}
