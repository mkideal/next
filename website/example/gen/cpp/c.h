// Code generated by "next 0.0.5"; DO NOT EDIT.

#pragma once

#include <any>
#include <array>
#include <cstdint>
#include <map>
#include <string>
#include <unordered_map>
#include <vector>

#include "a.h"
#include "b.h"

namespace demo::c {
// Enums forward declarations
enum class Color;
enum class LoginType;
enum class UserType;

// Classes forward declarations
class User;
class LoginRequest;
class LoginResponse;

inline constexpr auto A = 1;
inline constexpr auto B = "hello";
inline constexpr auto C = 3.14;
inline constexpr auto D = true;

enum class Color : int32_t {
	Red = 0,
	Green = 1,
	Blue = 2,
};

enum class LoginType : int32_t {
	Username = 1,
	Email = 2,
};

enum class UserType : int32_t {
	Admin = 1,
	User = 2,
};

class User {
public:
	UserType type = {UserType(0)};
	int id = {0};
	std::string username = {""};
	std::string password = {""};
	std::string device_id = {""};
	std::string two_factor_token = {""};
	std::vector<std::string> roles;
	std::unordered_map<std::string, std::string> metadata;
	std::array<int, 4> scores = {0};

public:
	User() = default;
	~User() = default;
};

class LoginRequest {
public:
	LoginType type = {LoginType(0)};
	std::string username = {""};
	std::string password = {""};
	std::string device_id = {""};
	std::string two_factor_token = {""};

public:
	LoginRequest() = default;
	~LoginRequest() = default;
};

class LoginResponse {
public:
	bool success = {false};
	std::string error_message = {""};
	std::string authentication_token = {""};
	User user;

public:
	LoginResponse() = default;
	~LoginResponse() = default;
};
} // namespace demo::c