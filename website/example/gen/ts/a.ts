// Code generated by "next"; DO NOT EDIT

/**
 * XX constant
 * XX value 2
 */
export const XX: number = 1; // XX value
/**
 * Constants
 */
export const ServerName: string = "Comprehensive Test Server";
export const Version: string = "1.0.0";
export const MaxConnections: number = 1000;
export const Pi: number = 3.14159265358979323846;
export const MaxInt64: bigint = 9223372036854775807n; // 2^63 - 1
export const MinInt64: bigint = -9223372036854775808n; // -2^63
/**
 * Constants with complex expressions
 */
export const A: number = 1;
export const B: number = 3;
export const C: number = 9;
export const D: number = 7;
export const E: number = 28;
export const F: number = 1052;
export const G: number = 1052;
export const H: number = 5672;
export const I: number = 5673.618; // Approximation of golden ratio
export const J: number = 47.28015; // 120 is 5!
/**
 * Constants with function calls
 */
export const StringLength: number = 13;
export const MinValue: number = 1;
export const MaxValue: number = 5673;
/**
 * Constants using built-in functions
 */
export const IntFromBool: number = 1;
export const IntFromFloat: number = 3;
export const FloatFromInt: number = 42.0;
export const FloatFromBool: number = 0.0;
export const BoolFromInt: boolean = true;
export const BoolFromString: boolean = true;
export const FormattedString1: string = "The answer is 42";
export const FormattedString2: string = "Pi is approximately 3.14";
export const FormattedString3: string = "Hello World\n";
/**
 * Constants for testing complex expressions and bitwise operations
 */
export const Complex1: number = 5673;
export const Complex2: number = 78547;
export const Complex3: number = 31;
export const Complex4: number = 31;
export const Complex5: number = 31;

/**
 * Enum with iota
 */
export enum Color {
	Red = 1,
	Green = 2,
	Blue = 4,
	Alpha = 8,
	Yellow = 3,
	Cyan = 6,
	Magenta = 5,
	White = 7
}

/**
 * Enum with complex iota usage
 */
export enum FilePermission {
	None = 0,
	Execute = 1,
	Write = 2,
	Read = 4,
	UserRead = 4,
	UserWrite = 32,
	UserExecute = 256,
	GroupRead = 2048,
	GroupWrite = 16384,
	GroupExecute = 131072,
	OthersRead = 1048576,
	OthersWrite = 8388608,
	OthersExecute = 67108864,
	/**
	 * 4|32|256|2048|16384|131072|1048576|8388608|67108864
	 * 4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864
	 */
	All = 76695844
}

export enum Day {
	Monday = 1,
	Tuesday = 2,
	Wednesday = 4,
	Thursday = 8,
	Friday = 16,
	Saturday = 32,
	Sunday = 64,
	Weekday = 31,
	Weekend = 96
}

export enum Month {
	January = 1,
	February = 2,
	March = 4,
	April = 8,
	May = 16,
	June = 32,
	July = 64,
	August = 128,
	September = 256,
	October = 512,
	November = 1024,
	December = 2048,
	Q1 = 7,
	Q2 = 56,
	Q3 = 448,
	Q4 = 3584
}

/**
 * Test cases for iota
 */
export enum IotatestEnum {
	A = 0, // 0
	B = 1, // 1
	C = 0, // 0
	D = 2, // 2
	E = 0, // 0
	F = 1, // 1
	G = 0 // 0
}

/**
 * Struct types
 */
export class Point2D {
	x: number; // x-coordinate
	y: number; // y-coordinate
}

export class Point3D {
	point: Point2D;
	z: number;
}

export class Rectangle {
	topLeft: Point2D;
	bottomRight: Point2D;
}

/**
 * Struct with various field types
 */
export class ComplexStruct {
	flag: boolean;
	tinyInt: number;
	smallInt: number;
	mediumInt: number;
	bigInt: bigint;
	defaultInt: number;
	singlePrecision: number;
	doublePrecision: number;
	text: string;
	singleByte: number;
	byteArray: Uint8Array;
	fixedArray: Array<number>;
	dynamicArray: Array<string>;
	intArray: Array<number>;
	dictionary: Map<string, number>;
}

export class User {
	id: bigint;
	username: string;
	email: string;
	preferredDay: Day;
	birthMonth: Month;
}

export class UserProfile {
	user: User;
	firstName: string;
	lastName: string;
	age: number;
	interests: Array<string>;
}

/**
 * message types
 */
export class LoginRequest {
	username: string;
	password: string;
	deviceId: string;
	twoFactorToken?: string;
}

export class LoginResponse {
	success: boolean;
	errorMessage: string;
	authenticationToken: string;
	user: User;
}

export class GenericRequest {
	requestId: string;
	timestamp: bigint;
}

export class GenericResponse {
	requestId: string;
	timestamp: bigint;
	success: boolean;
	errorCode: string;
	errorMessage: string;
}
