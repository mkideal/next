// Code generated by "next 0.0.5"; DO NOT EDIT.

using System;
using System.Collections.Generic;

namespace a
{
	// XX constant
	// XX value 2
	public const int XX = 1; // XX value
	// Constants
	public const string ServerName = "Comprehensive Test Server";
	public const string Version = "1.0.0";
	public const int MaxConnections = 1000;
	public const double Pi = 3.14159265358979323846;
	public const long MaxInt64 = 9223372036854775807; // 2^63 - 1
	public const long MinInt64 = -9223372036854775808; // -2^63
	// Constants with complex expressions
	public const int A = 1;
	public const int B = 3;
	public const int C = 9;
	public const int D = 7;
	public const int E = 28;
	public const int F = 1052;
	public const int G = 1052;
	public const int H = 5672;
	public const double I = 5673.618; // Approximation of golden ratio
	public const double J = 47.28015; // 120 is 5!
	// Constants with function calls
	public const int StringLength = 13;
	public const int MinValue = 1;
	public const int MaxValue = 5673;
	// Constants using built-in functions
	public const int IntFromBool = 1;
	public const int IntFromFloat = 3;
	public const float FloatFromInt = 42.0;
	public const float FloatFromBool = 0.0;
	public const bool BoolFromInt = true;
	public const bool BoolFromString = true;
	public const string FormattedString1 = "The answer is 42";
	public const string FormattedString2 = "Pi is approximately 3.14";
	public const string FormattedString3 = "Hello World\n";
	// Constants for testing complex expressions and bitwise operations
	public const int Complex1 = 5673;
	public const int Complex2 = 78547;
	public const int Complex3 = 31;
	public const int Complex4 = 31;
	public const int Complex5 = 31;

	// Enum with iota
	public enum Color
	{
		Red = 1,
		Green = 2,
		Blue = 4,
		Alpha = 8,
		Yellow = 3,
		Cyan = 6,
		Magenta = 5,
		White = 7,
	}

	// Enum with complex iota usage
	public enum FilePermission
	{
		None = 0,
		Execute = 1,
		Write = 2,
		Read = 4,
		UserRead = 4,
		UserWrite = 32,
		UserExecute = 256,
		GroupRead = 2048,
		GroupWrite = 16384,
		GroupExecute = 131072,
		OthersRead = 1048576,
		OthersWrite = 8388608,
		OthersExecute = 67108864,
		// 4|32|256|2048|16384|131072|1048576|8388608|67108864
		// 4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864
		All = 76695844,
	}

	public enum Day
	{
		Monday = 1,
		Tuesday = 2,
		Wednesday = 4,
		Thursday = 8,
		Friday = 16,
		Saturday = 32,
		Sunday = 64,
		Weekday = 31,
		Weekend = 96,
	}

	public enum Month
	{
		January = 1,
		February = 2,
		March = 4,
		April = 8,
		May = 16,
		June = 32,
		July = 64,
		August = 128,
		September = 256,
		October = 512,
		November = 1024,
		December = 2048,
		Q1 = 7,
		Q2 = 56,
		Q3 = 448,
		Q4 = 3584,
	}

	// Test cases for iota
	public enum IotatestEnum
	{
		A = 0, // 0
		B = 1, // 1
		C = 0, // 0
		D = 2, // 2
		E = 0, // 0
		F = 1, // 1
		G = 0, // 0
	}

	// Struct types
	public class Point2D
	{
		public double x { get; set; } // x-coordinate
		public double y { get; set; } // y-coordinate
	}

	public class Point3D
	{
		public Point2D point { get; set; }
		public double z { get; set; }
	}

	public class Rectangle
	{
		public Point2D topLeft { get; set; }
		public Point2D bottomRight { get; set; }
	}

	// Struct with various field types
	public class ComplexStruct
	{
		public bool flag { get; set; }
		public sbyte tinyInt { get; set; }
		public short smallInt { get; set; }
		public int mediumInt { get; set; }
		public long bigInt { get; set; }
		public int defaultInt { get; set; }
		public float singlePrecision { get; set; }
		public double doublePrecision { get; set; }
		public string text { get; set; }
		public byte singleByte { get; set; }
		public byte[] byteArray { get; set; }
		public int[] fixedArray { get; set; }
		public List<string> dynamicArray { get; set; }
		public List<int> intArray { get; set; }
		public Dictionary<string, int> dictionary { get; set; }
	}

	public class User
	{
		public long id { get; set; }
		public string username { get; set; }
		public string email { get; set; }
		public Day preferredDay { get; set; }
		public Month birthMonth { get; set; }
	}

	public class UserProfile
	{
		public User user { get; set; }
		public string firstName { get; set; }
		public string lastName { get; set; }
		public int age { get; set; }
		public List<string> interests { get; set; }
	}

	// message types
	public class LoginRequest
	{
		public string username { get; set; }
		public string password { get; set; }
		public string deviceId { get; set; }
		public string twoFactorToken { get; set; }

		public static int MessageType() { return 201; }
	}

	public class LoginResponse
	{
		public bool success { get; set; }
		public string errorMessage { get; set; }
		public string authenticationToken { get; set; }
		public User user { get; set; }

		public static int MessageType() { return 202; }
	}

	public class GenericRequest
	{
		public string requestId { get; set; }
		public long timestamp { get; set; }
	}

	public class GenericResponse
	{
		public string requestId { get; set; }
		public long timestamp { get; set; }
		public bool success { get; set; }
		public string errorCode { get; set; }
		public string errorMessage { get; set; }
	}
}