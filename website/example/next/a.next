// Package declaration

@next(
	go_package="github.com/mkideal/next/website/example/gen/go/a",
	cpp_package="demo::a",
	c_package="DEMO_A_",
	java_package="com.example.a",
)
package a;

// XX constant
// XX value 2
const XX = 1; // XX value

// Constants
const ServerName = "Comprehensive Test Server";
const Version = "1.0.0";
const MaxConnections = 1000;
const Pi = 3.14159265358979323846;
const MaxInt64 = 9223372036854775807;  // 2^63 - 1
const MinInt64 = -9223372036854775808; // -2^63

// Assert constants
assert_eq(ServerName, "Comprehensive Test Server");
assert_eq(Version, "1.0.0");
assert_eq(MaxConnections, 1000);
assert(Pi > 3.14 && Pi < 3.15, "Pi value out of expected range: ", Pi);
assert_eq(MaxInt64, 9223372036854775807);
assert_eq(MinInt64, -9223372036854775808);

// Constants with complex expressions
const A = 1;
const B = A + 2;
const C = B * 3;
const D = (C + 5) / 2;
const E = D << 2;
const F = E | (1 << 10);
const G = F & 0xFFFF;
const H = G ^ 0x1234;
const I = H + 1.618;  // Approximation of golden ratio
const J = I / 120;    // 120 is 5!

// Assert complex constants
assert_eq(A, 1);
assert_eq(B, 3);
assert_eq(C, 9);
assert_eq(D, 7);
assert_eq(E, 28);
assert_eq(F, 1052);
assert_eq(G, 1052);
assert_eq(H, 5672);
assert(I > 5673.0 && I < 5674.0, "I value out of expected range: ", I);
assert(J > 47.28 && J < 47.29, "J value out of expected range: ", J);

// Constants with function calls
const StringLength = len("Hello, World!");
const MinValue = min(A, B, C, D, E);
const MaxValue = max(F, G, H, int(I), int(J));

// Assert function call constants
assert_eq(StringLength, 13);
assert_eq(MinValue, 1);
assert_eq(MaxValue, 5673);

// Enum with iota
enum Color {
	Red = 1 << iota;
	Green;
	Blue;
	Alpha;
	Yellow = Red | Green;
	Cyan = Green | Blue;
	Magenta = Red | Blue;
	White = Red | Green | Blue;
}

// Assert Color enum
assert_eq(Color.Red, 1);
assert_eq(Color.Green, 2);
assert_eq(Color.Blue, 4);
assert_eq(Color.Alpha, 8);
assert_eq(Color.Yellow, 3);
assert_eq(Color.Cyan, 6);
assert_eq(Color.Magenta, 5);
assert_eq(Color.White, 7);

// Enum with complex iota usage
enum FilePermission {
	None = 0;
	Execute = 1 << iota;
	Write;
	Read;

	UserRead = Read << (3 * iota);
	UserWrite;
	UserExecute;

	GroupRead;
	GroupWrite;
	GroupExecute;

	OthersRead;
	OthersWrite;
	OthersExecute;

	// 4|32|256|2048|16384|131072|1048576|8388608|67108864
	// 4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864
	All = UserRead | UserWrite | UserExecute | 
	      GroupRead | GroupWrite | GroupExecute | 
	      OthersRead | OthersWrite | OthersExecute;
}

// Assert FilePermission enum
assert_eq(FilePermission.None, 0);
assert_eq(FilePermission.Execute, 1);
assert_eq(FilePermission.Write, 2);
assert_eq(FilePermission.Read, 4);
assert_eq(FilePermission.UserRead, 4);
assert_eq(FilePermission.UserWrite, 32);
assert_eq(FilePermission.UserExecute, 256);
assert_eq(FilePermission.GroupRead, 2048);
assert_eq(FilePermission.GroupWrite, 16384);
assert_eq(FilePermission.GroupExecute, 131072);
assert_eq(FilePermission.OthersRead, 1048576);
assert_eq(FilePermission.OthersWrite, 8388608);
assert_eq(FilePermission.OthersExecute, 67108864);
assert_eq(FilePermission.All, (4 + 32 + 256 + 2048 + 16384 + 131072 + 1048576 + 8388608 + 67108864));

enum Day {
	Monday = 1 << iota;
	Tuesday;
	Wednesday;
	Thursday;
	Friday;
	Saturday;
	Sunday;

	Weekday = Monday | Tuesday | Wednesday | Thursday | Friday;
	Weekend = Saturday | Sunday;
}

enum Month {
	January = 1 << iota;
	February;
	March;
	April;
	May;
	June;
	July;
	August;
	September;
	October;
	November;
	December;

	Q1 = January | February | March;
	Q2 = April | May | June;
	Q3 = July | August | September;
	Q4 = October | November | December;
}

// Assert Day enum
assert_eq(Day.Monday, 1);
assert_eq(Day.Tuesday, 2);
assert_eq(Day.Wednesday, 4);
assert_eq(Day.Thursday, 8);
assert_eq(Day.Friday, 16);
assert_eq(Day.Saturday, 32);
assert_eq(Day.Sunday, 64);
assert_eq(Day.Weekday, 31);
assert_eq(Day.Weekend, 96);

// Assert Month enum
assert_eq(Month.January, 1);
assert_eq(Month.February, 2);
assert_eq(Month.March, 4);
assert_eq(Month.April, 8);
assert_eq(Month.May, 16);
assert_eq(Month.June, 32);
assert_eq(Month.July, 64);
assert_eq(Month.August, 128);
assert_eq(Month.September, 256);
assert_eq(Month.October, 512);
assert_eq(Month.November, 1024);
assert_eq(Month.December, 2048);
assert_eq(Month.Q1, 7);
assert_eq(Month.Q2, 56);
assert_eq(Month.Q3, 448);
assert_eq(Month.Q4, 3584);

// Struct types
struct Point2D {
	float64 x; // x-coordinate
	float64 y; // y-coordinate
}

struct Point3D {
	Point2D point;
	float64 z;
}

struct Rectangle {
	Point2D topLeft;
	Point2D bottomRight;
}

// Struct with various field types
struct ComplexStruct {
	bool flag;
	int8 tinyInt;
	int16 smallInt;
	int32 mediumInt;
	int64 bigInt;
	int defaultInt;
	float32 singlePrecision;
	float64 doublePrecision;
	string text;
	byte singleByte;
	bytes byteArray;
	array<int, 5> fixedArray;
	vector<string> dynamicArray;
	vector<int> intArray;
	map<string, int> dictionary;
}

struct User {
	int64 id;
	string username;
	string email;
	Day preferredDay;
	Month birthMonth;
}

struct UserProfile {
	User user;
	string firstName;
	string lastName;
	int age;
	vector<string> interests;
}

// message types
@message(type=201,req)
struct LoginRequest {
	string username;
	string password;
	string deviceId;
	@next(optional)
	string twoFactorToken;
}

@message(type=202)
struct LoginResponse {
	bool success;
	string errorMessage;
	string authenticationToken;
	User user;
}

struct GenericRequest {
	string requestId;
	int64 timestamp;
}

struct GenericResponse {
	string requestId;
	int64 timestamp;
	bool success;
	string errorCode;
	string errorMessage;
}

// Test cases for iota
enum IotatestEnum {
	A = iota;     // 0
	B;            // 1
	C = iota * 2; // 0
	D;            // 2
	E = iota * iota;  // 0
	F;                // 1
	G = iota + C;     // 0
}

// Assert IotatestEnum
assert_eq(IotatestEnum.A, 0);
assert_eq(IotatestEnum.B, 1);
assert_eq(IotatestEnum.C, 0);
assert_eq(IotatestEnum.D, 2);
assert_eq(IotatestEnum.E, 0);
assert_eq(IotatestEnum.F, 1);
assert_eq(IotatestEnum.G, 0);

// Constants using built-in functions
const IntFromBool = int(true);
const IntFromFloat = int(3.14);
const FloatFromInt = float(42);
const FloatFromBool = float(false);
const BoolFromInt = bool(1);
const BoolFromString = bool("true");

const FormattedString1 = sprint("The answer is ", 42);
const FormattedString2 = sprintf("Pi is approximately %.2f", Pi);
const FormattedString3 = sprintln("Hello", "World");

// Assert built-in function constants
assert_eq(IntFromBool, 1);
assert_eq(IntFromFloat, 3);
assert_eq(FloatFromInt, 42.0);
assert_eq(FloatFromBool, 0.0);
assert_eq(BoolFromInt, true);
assert_eq(BoolFromString, true);
assert_eq(FormattedString1, "The answer is 42");
assert_eq(FormattedString2, "Pi is approximately 3.14");
assert_eq(FormattedString3, "Hello World\n");

// Constants for testing complex expressions and bitwise operations
const Complex1 = (A + B) * (C - D) / (E + F) & (G | H) ^ int(I);
const Complex2 = min(max(A, B, C), min(D, E, F)) + abs(G - H) * len(sprint(I, J));
const Complex3 = (Day.Weekday);
const Complex4 = (Day.Weekday &^ Day.Weekend);
const Complex5 = Color.Red | (FilePermission.UserRead & FilePermission.GroupWrite) | (Day.Weekday &^ Day.Weekend);

// Assert complex expression constants
assert_eq(Complex1, 5673);
assert_eq(Complex2, 78547);
assert_eq(Complex3, 31);
assert_eq(Complex4, 31);
assert_eq(Complex5, 31);

assert_eq(1, 1);
assert_ne(1, 2);
assert_lt(1, 2);
assert_le(1, 1);
assert_gt(2, 1);
assert_ge(2, 2);

printf("GO_MOD=%s", getenv("GO_MOD") || "github.com/mkideal/next/website/example/gen/go");
printf("JAVA_COM=%s", getenv("JAVA_COM") || "com.example");

print("All tests passed!");